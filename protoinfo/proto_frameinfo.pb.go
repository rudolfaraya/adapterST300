// Code generated by protoc-gen-go.
// source: frameinfo/proto_frameinfo/proto_frameinfo.proto
// DO NOT EDIT!

/*
Package proto_frameinfo is a generated protocol buffer package.

It is generated from these files:
	frameinfo/proto_frameinfo/proto_frameinfo.proto

It has these top-level messages:
	Int32Value
	DoubleValue
	Report
	FMS1
	FMS4
	CANSquarell
	FrameInfo
*/
package protoinfo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ReportType identifies the type of report. Unmapped report types are typed with Unknown.
type Report_ReportType int32

const (
	// Unknown is used as type of unmapped events
	Report_Unknown Report_ReportType = 0
	// PanicButton occurs when the panic button is pressed
	Report_PanicButton Report_ReportType = 1
	// IgnitionOn occurs when the ignition is on.
	Report_IgnitionOn Report_ReportType = 2
	// IgnitionOff occurs when the ignition is off.
	Report_IgnitionOff Report_ReportType = 3
	// ModemOff occurs when the asset stands still, the ignition is off and a report by time is sent.
	Report_ModemOff Report_ReportType = 4
	// TimeExpired occurs when the asset stands still, the ignition is on and a report by time is sent.
	Report_TimeExpired Report_ReportType = 5
	// WayPoint occurs when the asset is moving and the position is reported (this could be by time, by distance
	// or using another criteria).
	Report_WayPoint Report_ReportType = 6
	// BackupBattery occurs when the backup battery starts working.
	Report_BackupBattery Report_ReportType = 7
	// MainBattery occurs when the main battery starts working.
	Report_MainBattery Report_ReportType = 8
	// OverSpeed occurs when the asset exceeds a certain speed (configured in the device).
	Report_OverSpeed Report_ReportType = 9
	// NormalSpeed occurs when the asset goes back to a certain speed, considered normal (configured in the device).
	Report_NormalSpeed Report_ReportType = 10
	// HarshAcceleration occurs when when the driver applies more force than normal to the asset's accelerator.
	Report_HarshAcceleration Report_ReportType = 11
	// HarshBraking occurs when when the driver applies more force than normal to the asset's brake.
	Report_HarshBraking Report_ReportType = 12
	// Shocked occurs when a shock impact is given to the asset.
	Report_Shocked Report_ReportType = 13
	// Collision occurs when a collision happened to the asset.
	Report_Collision Report_ReportType = 14
	// SharpTurn occurs when the driver changes the direction of the asset suddenly.
	Report_SharpTurn Report_ReportType = 15
	// JammingDetected occurs when the device detects a Jamming signal.
	Report_JammingDetected Report_ReportType = 16
	// ExternalData occurs when the device reports external data (from another device, usually CAN data)
	Report_ExternalData Report_ReportType = 17
	// Tow occurs when the asset is being towed
	Report_Tow Report_ReportType = 18
	// Turn occurs when the asset turns around a corner
	Report_Turn Report_ReportType = 19
	// Motion occurs when the asset is in motion and the ignition is off but isn't being towed (or if the ignition status is unknown)
	Report_Motion Report_ReportType = 20
	// BatteryAlert occurs when the asset battery voltage is in a specific range, usually a low one and the user
	// should be notified.
	Report_BatteryAlert Report_ReportType = 21
	//Occurs when the dispositive is disconnected from backup battery
	Report_DisconnectedBackupBattery = 22
	//Occurs when the dispositive is disconnected from main battery.
	Report_DisconnectedMainBattery = 23
	//Ocurrs when the asset stands still, the ignition is off, a report by time is sent and the SwitchStart is on
	Report_ParkingModeNextIgnitionCut = 24
	//Ocurrs when the asset stands still, the ignition is on, a report by time is sent and the SwitchStart is on
	Report_DrivingModeNextIgnitionCut = 25
	//Occurs when the asset is moving, the position is reported and the SwitchStart is on
	Report_DistanceModeNextIgnitionCut = 26
	//Occurs when the asset turns around a corner and the SwitchStart is on
	Report_AngleModeNextIgnitionCut = 27
	//Occurs when the dispositive is in Deep Sleep Mode
	Report_EnterDeepSleepMode = 28
	//Occurs when the dispositive exit form Deep Sleep Mode
	Report_ExitDeepSleepMode = 29
)

var Report_ReportType_name = map[int32]string{
	0:  "Unknown",
	1:  "PanicButton",
	2:  "IgnitionOn",
	3:  "IgnitionOff",
	4:  "ModemOff",
	5:  "TimeExpired",
	6:  "WayPoint",
	7:  "BackupBattery",
	8:  "MainBattery",
	9:  "OverSpeed",
	10: "NormalSpeed",
	11: "HarshAcceleration",
	12: "HarshBraking",
	13: "Shocked",
	14: "Collision",
	15: "SharpTurn",
	16: "JammingDetected",
	17: "ExternalData",
	18: "Tow",
	19: "Turn",
	20: "Motion",
	21: "BatteryAlert",
	22: "BackupBatteryDisconnected",
	23: "MainBatteryDisconnected",
	24: "ParkingModeNextIgnitionCut",
	25: "DrivingModeNextIgnitionCut",
	26: "DistanceModeNextIgnitionCut",
	27: "AngleModeNextIgnitionCut",
	28: "EnterDeepSleepMode",
	29: "ExitDeepSleepMode",
}
var Report_ReportType_value = map[string]int32{
	"Unknown":                     0,
	"PanicButton":                 1,
	"IgnitionOn":                  2,
	"IgnitionOff":                 3,
	"ModemOff":                    4,
	"TimeExpired":                 5,
	"WayPoint":                    6,
	"BackupBattery":               7,
	"MainBattery":                 8,
	"OverSpeed":                   9,
	"NormalSpeed":                 10,
	"HarshAcceleration":           11,
	"HarshBraking":                12,
	"Shocked":                     13,
	"Collision":                   14,
	"SharpTurn":                   15,
	"JammingDetected":             16,
	"ExternalData":                17,
	"Tow":                         18,
	"Turn":                        19,
	"Motion":                      20,
	"BatteryAlert":                21,
	"BackupBatteryDisconnected":   22,
	"MainBatteryDisconnected":     23,
	"ParkingModeNextIgnitionCut":  24,
	"DrivingModeNextIgnitionCut":  25,
	"DistanceModeNextIgnitionCut": 26,
	"AngleModeNextIgnitionCut":    27,
	"EnterDeepSleepMode":          28,
	"ExitDeepSleepMode":           29,
}

func (x Report_ReportType) String() string {
	return proto.EnumName(Report_ReportType_name, int32(x))
}
func (Report_ReportType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// PTOType is the type of PTOActive
type FMS1_PTOType int32

const (
	FMS1_Disabled             FMS1_PTOType = 0
	FMS1_Hold                 FMS1_PTOType = 1
	FMS1_RemoteHold           FMS1_PTOType = 2
	FMS1_Standby              FMS1_PTOType = 3
	FMS1_RemoteStandby        FMS1_PTOType = 4
	FMS1_Set                  FMS1_PTOType = 5
	FMS1_DecelerateCoast      FMS1_PTOType = 6
	FMS1_Resume               FMS1_PTOType = 7
	FMS1_Accelerate           FMS1_PTOType = 8
	FMS1_AcceleratorOverride  FMS1_PTOType = 9
	FMS1_PreprogramedSetSpeed FMS1_PTOType = 10
	FMS1_PTOSetSpeedMemory1   FMS1_PTOType = 11
	FMS1_PTOSetSpeedMemory2   FMS1_PTOType = 12
	FMS1_NotDefined           FMS1_PTOType = 13
	FMS1_NotAvailable         FMS1_PTOType = 14
)

var FMS1_PTOType_name = map[int32]string{
	0:  "Disabled",
	1:  "Hold",
	2:  "RemoteHold",
	3:  "Standby",
	4:  "RemoteStandby",
	5:  "Set",
	6:  "DecelerateCoast",
	7:  "Resume",
	8:  "Accelerate",
	9:  "AcceleratorOverride",
	10: "PreprogramedSetSpeed",
	11: "PTOSetSpeedMemory1",
	12: "PTOSetSpeedMemory2",
	13: "NotDefined",
	14: "NotAvailable",
}
var FMS1_PTOType_value = map[string]int32{
	"Disabled":             0,
	"Hold":                 1,
	"RemoteHold":           2,
	"Standby":              3,
	"RemoteStandby":        4,
	"Set":                  5,
	"DecelerateCoast":      6,
	"Resume":               7,
	"Accelerate":           8,
	"AcceleratorOverride":  9,
	"PreprogramedSetSpeed": 10,
	"PTOSetSpeedMemory1":   11,
	"PTOSetSpeedMemory2":   12,
	"NotDefined":           13,
	"NotAvailable":         14,
}

func (x FMS1_PTOType) String() string {
	return proto.EnumName(FMS1_PTOType_name, int32(x))
}
func (FMS1_PTOType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

// Format
type FrameInfo_Format int32

const (
	// Raw indicates that the data bytes are "as-is".
	FrameInfo_Raw FrameInfo_Format = 0
	// Hex indicates that the data bytes are hex encoded.
	FrameInfo_Hex FrameInfo_Format = 1
)

var FrameInfo_Format_name = map[int32]string{
	0: "Raw",
	1: "Hex",
}
var FrameInfo_Format_value = map[string]int32{
	"Raw": 0,
	"Hex": 1,
}

func (x FrameInfo_Format) String() string {
	return proto.EnumName(FrameInfo_Format_name, int32(x))
}
func (FrameInfo_Format) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

// TODO: use google/protobuf/wrappers.proto when it be reasonably straigthforward
type Int32Value struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *Int32Value) Reset()                    { *m = Int32Value{} }
func (m *Int32Value) String() string            { return proto.CompactTextString(m) }
func (*Int32Value) ProtoMessage()               {}
func (*Int32Value) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Int32Value) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// TODO: use google/protobuf/wrappers.proto when it be reasonably straigthforward
type DoubleValue struct {
	Value float64 `protobuf:"fixed64,1,opt,name=value" json:"value,omitempty"`
}

func (m *DoubleValue) Reset()                    { *m = DoubleValue{} }
func (m *DoubleValue) String() string            { return proto.CompactTextString(m) }
func (*DoubleValue) ProtoMessage()               {}
func (*DoubleValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DoubleValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Report is a measurement from a modem device, like ST600, MT4000, etc. A report has a type, and is originated from a
// single frame that was measured in a specific place and time (so it has position and it's timestamped).
type Report struct {
	// report_id is the id of the report, a non-empty string, that identifies uniquely this report.
	ReportId string `protobuf:"bytes,12,opt,name=report_id,json=reportId" json:"report_id,omitempty"`
	// installation_id is the id of the installation associated to this report.
	InstallationId int32 `protobuf:"varint,18,opt,name=installation_id,json=installationId" json:"installation_id,omitempty"`
	// asset_id is the id of the asset associated to this report.
	AssetId int32 `protobuf:"varint,13,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	// dev_id is the device ID, a non-empty string, with a maximum length of 20, that uniquely identifies a device.
	DevId string `protobuf:"bytes,14,opt,name=dev_id,json=devId" json:"dev_id,omitempty"`
	// server_timestamp is the report creation timestamp in the server, in seconds from the epoch.
	// This value can diverge significantly from the real timestamp if the frame was buffered in the device prior
	// to its transmission to the server.
	ServerTimestamp int64 `protobuf:"varint,15,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	// frame_id is the ID of the frame, a non-empty string, source of the report.
	FrameId string `protobuf:"bytes,16,opt,name=frame_id,json=frameId" json:"frame_id,omitempty"`
	// type is the type of the report.
	Type Report_ReportType `protobuf:"varint,1,opt,name=type,enum=proto_frameinfo.Report_ReportType" json:"type,omitempty"`
	// timestamp is the timestamp when the measurement was made (in the device), in seconds from the epoch.
	// This value can diverge significantly from the server timestamp if the frame was buffered in the device prior
	// to its transmission to the server.
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// latitude is the latitude in decimal degrees. Optional field.
	Latitude float64 `protobuf:"fixed64,3,opt,name=latitude" json:"latitude,omitempty"`
	// longitude is the longitude in decimal degrees. Optional field.
	Longitude float64 `protobuf:"fixed64,4,opt,name=longitude" json:"longitude,omitempty"`
	// speed is the speed of the asset in km per hour. Optional field.
	Speed float64 `protobuf:"fixed64,5,opt,name=speed" json:"speed,omitempty"`
	// heading is the orientation of the asset in sexagesimal degrees. Optional field.
	Heading float64 `protobuf:"fixed64,6,opt,name=heading" json:"heading,omitempty"`
	// gps_fixed indicates if the GPS is fixed (check https://en.wikipedia.org/wiki/Fix_(position)). Optional field.
	GpsFixed bool `protobuf:"varint,7,opt,name=gps_fixed,json=gpsFixed" json:"gps_fixed,omitempty"`

	HourMeter int64
	// satellites is the number of visible satellites. Optional field.
	Satellites *Int32Value `protobuf:"bytes,8,opt,name=satellites" json:"satellites,omitempty"`
	// power_volt is the voltage of the main power. Optional field.
	PowerVolt *DoubleValue `protobuf:"bytes,9,opt,name=power_volt,json=powerVolt" json:"power_volt,omitempty"`
	// backup_volt is the voltage of the backup power. Optional field.
	BackupVolt *DoubleValue `protobuf:"bytes,10,opt,name=backup_volt,json=backupVolt" json:"backup_volt,omitempty"`
	// can_squarell is a CAN measurement from a Squarell Solid/Flex device. Optional field.
	CanSquarell *CANSquarell `protobuf:"bytes,11,opt,name=can_squarell,json=canSquarell" json:"can_squarell,omitempty"`
	// tags is a collection of free form strings, used as metadata. For example, a frame infor could be tagged
	// with "smoke-test", indicating that is a testing frame, and should be discarded by the consumers. Optional field.
	Tags []string `protobuf:"bytes,17,rep,name=tags" json:"tags,omitempty"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Report) GetReportId() string {
	if m != nil {
		return m.ReportId
	}
	return ""
}

func (m *Report) GetInstallationId() int32 {
	if m != nil {
		return m.InstallationId
	}
	return 0
}

func (m *Report) GetAssetId() int32 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *Report) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *Report) GetServerTimestamp() int64 {
	if m != nil {
		return m.ServerTimestamp
	}
	return 0
}

func (m *Report) GetFrameId() string {
	if m != nil {
		return m.FrameId
	}
	return ""
}

func (m *Report) GetType() Report_ReportType {
	if m != nil {
		return m.Type
	}
	return Report_Unknown
}

func (m *Report) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Report) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Report) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Report) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Report) GetHeading() float64 {
	if m != nil {
		return m.Heading
	}
	return 0
}

func (m *Report) GetGpsFixed() bool {
	if m != nil {
		return m.GpsFixed
	}
	return false
}

func (m *Report) GetHourMeter() int64 {
	if m != nil {
		return m.HourMeter
	}
	return 0
}

func (m *Report) GetSatellites() *Int32Value {
	if m != nil {
		return m.Satellites
	}
	return nil
}

func (m *Report) GetPowerVolt() *DoubleValue {
	if m != nil {
		return m.PowerVolt
	}
	return nil
}

func (m *Report) GetBackupVolt() *DoubleValue {
	if m != nil {
		return m.BackupVolt
	}
	return nil
}

func (m *Report) GetCanSquarell() *CANSquarell {
	if m != nil {
		return m.CanSquarell
	}
	return nil
}

func (m *Report) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// FMS1 is a Squarell FMS1 message.
type FMS1 struct {
	// Odometer, in km.
	Odometer float64 `protobuf:"fixed64,1,opt,name=odometer" json:"odometer,omitempty"`
	// Total Fuel, in liters.
	TotalFuel float64 `protobuf:"fixed64,2,opt,name=total_fuel,json=totalFuel" json:"total_fuel,omitempty"`
	// Engine Hours, in hours.
	EngineHours float64 `protobuf:"fixed64,3,opt,name=engine_hours,json=engineHours" json:"engine_hours,omitempty"`
	// Actual Speed, in km/h.
	ActualSpeed float64 `protobuf:"fixed64,4,opt,name=actual_speed,json=actualSpeed" json:"actual_speed,omitempty"`
	// Actual Engine Speed, in RPM.
	ActualEngineSpeed float64 `protobuf:"fixed64,5,opt,name=actual_engine_speed,json=actualEngineSpeed" json:"actual_engine_speed,omitempty"`
	// Actual Engine Torque, % of maximum.
	ActualEngineTorque float64 `protobuf:"fixed64,6,opt,name=actual_engine_torque,json=actualEngineTorque" json:"actual_engine_torque,omitempty"`
	// Kickdown Switch.
	KickdownSwitch bool `protobuf:"varint,7,opt,name=kickdown_switch,json=kickdownSwitch" json:"kickdown_switch,omitempty"`
	// Accelerator Pedal Position, %.
	AcceleratorPedalPosition float64 `protobuf:"fixed64,8,opt,name=accelerator_pedal_position,json=acceleratorPedalPosition" json:"accelerator_pedal_position,omitempty"`
	// Brake Switch.
	BrakeSwitch bool `protobuf:"varint,9,opt,name=brake_switch,json=brakeSwitch" json:"brake_switch,omitempty"`
	// Clutch Switch.
	ClutchSwitch bool `protobuf:"varint,10,opt,name=clutch_switch,json=clutchSwitch" json:"clutch_switch,omitempty"`
	// Cruise Active.
	CruiseActive bool `protobuf:"varint,11,opt,name=cruise_active,json=cruiseActive" json:"cruise_active,omitempty"`
	// PTO Active.
	PtoActive FMS1_PTOType `protobuf:"varint,12,opt,name=pto_active,json=ptoActive,enum=proto_frameinfo.FMS1_PTOType" json:"pto_active,omitempty"`
	// Fuel Level, %.
	FuelLevel float64 `protobuf:"fixed64,13,opt,name=fuel_level,json=fuelLevel" json:"fuel_level,omitempty"`
	// Engine Temperature, in celsius degrees.
	EngineTemperature float64 `protobuf:"fixed64,14,opt,name=engine_temperature,json=engineTemperature" json:"engine_temperature,omitempty"`
	// Turbo Pressure, in bar.
	TurboPressure float64 `protobuf:"fixed64,15,opt,name=turbo_pressure,json=turboPressure" json:"turbo_pressure,omitempty"`
	// Axle Weight 0, in kg.
	AxleWeight_0 float64 `protobuf:"fixed64,16,opt,name=axle_weight_0,json=axleWeight0" json:"axle_weight_0,omitempty"`
	// Axle Weight 1, in kg.
	AxleWeight_1 float64 `protobuf:"fixed64,17,opt,name=axle_weight_1,json=axleWeight1" json:"axle_weight_1,omitempty"`
	// Axle Weight 2, in kg.
	AxleWeight_2 float64 `protobuf:"fixed64,18,opt,name=axle_weight_2,json=axleWeight2" json:"axle_weight_2,omitempty"`
	// Axle Weight 3, in kg.
	AxleWeight_3 float64 `protobuf:"fixed64,19,opt,name=axle_weight_3,json=axleWeight3" json:"axle_weight_3,omitempty"`
	// Service Distance, in km.
	ServiceDistance float64 `protobuf:"fixed64,20,opt,name=service_distance,json=serviceDistance" json:"service_distance,omitempty"`
}

func (m *FMS1) Reset()                    { *m = FMS1{} }
func (m *FMS1) String() string            { return proto.CompactTextString(m) }
func (*FMS1) ProtoMessage()               {}
func (*FMS1) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FMS1) GetOdometer() float64 {
	if m != nil {
		return m.Odometer
	}
	return 0
}

func (m *FMS1) GetTotalFuel() float64 {
	if m != nil {
		return m.TotalFuel
	}
	return 0
}

func (m *FMS1) GetEngineHours() float64 {
	if m != nil {
		return m.EngineHours
	}
	return 0
}

func (m *FMS1) GetActualSpeed() float64 {
	if m != nil {
		return m.ActualSpeed
	}
	return 0
}

func (m *FMS1) GetActualEngineSpeed() float64 {
	if m != nil {
		return m.ActualEngineSpeed
	}
	return 0
}

func (m *FMS1) GetActualEngineTorque() float64 {
	if m != nil {
		return m.ActualEngineTorque
	}
	return 0
}

func (m *FMS1) GetKickdownSwitch() bool {
	if m != nil {
		return m.KickdownSwitch
	}
	return false
}

func (m *FMS1) GetAcceleratorPedalPosition() float64 {
	if m != nil {
		return m.AcceleratorPedalPosition
	}
	return 0
}

func (m *FMS1) GetBrakeSwitch() bool {
	if m != nil {
		return m.BrakeSwitch
	}
	return false
}

func (m *FMS1) GetClutchSwitch() bool {
	if m != nil {
		return m.ClutchSwitch
	}
	return false
}

func (m *FMS1) GetCruiseActive() bool {
	if m != nil {
		return m.CruiseActive
	}
	return false
}

func (m *FMS1) GetPtoActive() FMS1_PTOType {
	if m != nil {
		return m.PtoActive
	}
	return FMS1_Disabled
}

func (m *FMS1) GetFuelLevel() float64 {
	if m != nil {
		return m.FuelLevel
	}
	return 0
}

func (m *FMS1) GetEngineTemperature() float64 {
	if m != nil {
		return m.EngineTemperature
	}
	return 0
}

func (m *FMS1) GetTurboPressure() float64 {
	if m != nil {
		return m.TurboPressure
	}
	return 0
}

func (m *FMS1) GetAxleWeight_0() float64 {
	if m != nil {
		return m.AxleWeight_0
	}
	return 0
}

func (m *FMS1) GetAxleWeight_1() float64 {
	if m != nil {
		return m.AxleWeight_1
	}
	return 0
}

func (m *FMS1) GetAxleWeight_2() float64 {
	if m != nil {
		return m.AxleWeight_2
	}
	return 0
}

func (m *FMS1) GetAxleWeight_3() float64 {
	if m != nil {
		return m.AxleWeight_3
	}
	return 0
}

func (m *FMS1) GetServiceDistance() float64 {
	if m != nil {
		return m.ServiceDistance
	}
	return 0
}

// FMS4 is a Squarell FMS4 message.
type FMS4 struct {
	// DurationDriving, in seconds.
	DurationDriving uint64 `protobuf:"varint,1,opt,name=duration_driving,json=durationDriving" json:"duration_driving,omitempty"`
	// DurationCruiseActive, in seconds.
	DurationCruiseActive uint64 `protobuf:"varint,2,opt,name=duration_cruise_active,json=durationCruiseActive" json:"duration_cruise_active,omitempty"`
	// IdlingTime, in seconds.
	IdlingTime uint64 `protobuf:"varint,3,opt,name=idling_time,json=idlingTime" json:"idling_time,omitempty"`
	// FuelUsedDuringIdle, in liters.
	FuelUsedDuringIdle float64 `protobuf:"fixed64,4,opt,name=fuel_used_during_idle,json=fuelUsedDuringIdle" json:"fuel_used_during_idle,omitempty"`
	// DurationOfPTO, in seconds.
	DurationOfPto uint64 `protobuf:"varint,5,opt,name=duration_of_pto,json=durationOfPto" json:"duration_of_pto,omitempty"`
	// FuelUsedDuringPTO, in liters.
	FuelUsedDuringPto float64 `protobuf:"fixed64,6,opt,name=fuel_used_during_pto,json=fuelUsedDuringPto" json:"fuel_used_during_pto,omitempty"`
	// NumberOfBrakeApplications, times.
	NumberOfBrakeApplications uint64 `protobuf:"varint,7,opt,name=number_of_brake_applications,json=numberOfBrakeApplications" json:"number_of_brake_applications,omitempty"`
	// NumOfBrakeApps > THR Harsh Brk.
	NumOfBrakeApps uint64 `protobuf:"varint,8,opt,name=num_of_brake_apps,json=numOfBrakeApps" json:"num_of_brake_apps,omitempty"`
	// NumOfClutchPresses, times.
	NumOfClutchPresses uint64 `protobuf:"varint,9,opt,name=num_of_clutch_presses,json=numOfClutchPresses" json:"num_of_clutch_presses,omitempty"`
	// IdleDuration > THR Idle Dura, times.
	IdleDuration uint64 `protobuf:"varint,10,opt,name=idle_duration,json=idleDuration" json:"idle_duration,omitempty"`
	// DurationEngineTorque > THR % Trq 4, in seconds.
	DurationEngineTorque uint64 `protobuf:"varint,11,opt,name=duration_engine_torque,json=durationEngineTorque" json:"duration_engine_torque,omitempty"`
	// DurationSpeed > THR Spd 4, in seconds.
	DurationSpeed float64 `protobuf:"fixed64,12,opt,name=duration_speed,json=durationSpeed" json:"duration_speed,omitempty"`
	// DurationRPM > THR RPM 4, in seconds.
	DurationRpm uint64 `protobuf:"varint,13,opt,name=duration_rpm,json=durationRpm" json:"duration_rpm,omitempty"`
	// DurationOfAcceleration > THR Harsh Acc, in seconds.
	DurationOfAcceleration uint64 `protobuf:"varint,14,opt,name=duration_of_acceleration,json=durationOfAcceleration" json:"duration_of_acceleration,omitempty"`
}

func (m *FMS4) Reset()                    { *m = FMS4{} }
func (m *FMS4) String() string            { return proto.CompactTextString(m) }
func (*FMS4) ProtoMessage()               {}
func (*FMS4) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FMS4) GetDurationDriving() uint64 {
	if m != nil {
		return m.DurationDriving
	}
	return 0
}

func (m *FMS4) GetDurationCruiseActive() uint64 {
	if m != nil {
		return m.DurationCruiseActive
	}
	return 0
}

func (m *FMS4) GetIdlingTime() uint64 {
	if m != nil {
		return m.IdlingTime
	}
	return 0
}

func (m *FMS4) GetFuelUsedDuringIdle() float64 {
	if m != nil {
		return m.FuelUsedDuringIdle
	}
	return 0
}

func (m *FMS4) GetDurationOfPto() uint64 {
	if m != nil {
		return m.DurationOfPto
	}
	return 0
}

func (m *FMS4) GetFuelUsedDuringPto() float64 {
	if m != nil {
		return m.FuelUsedDuringPto
	}
	return 0
}

func (m *FMS4) GetNumberOfBrakeApplications() uint64 {
	if m != nil {
		return m.NumberOfBrakeApplications
	}
	return 0
}

func (m *FMS4) GetNumOfBrakeApps() uint64 {
	if m != nil {
		return m.NumOfBrakeApps
	}
	return 0
}

func (m *FMS4) GetNumOfClutchPresses() uint64 {
	if m != nil {
		return m.NumOfClutchPresses
	}
	return 0
}

func (m *FMS4) GetIdleDuration() uint64 {
	if m != nil {
		return m.IdleDuration
	}
	return 0
}

func (m *FMS4) GetDurationEngineTorque() uint64 {
	if m != nil {
		return m.DurationEngineTorque
	}
	return 0
}

func (m *FMS4) GetDurationSpeed() float64 {
	if m != nil {
		return m.DurationSpeed
	}
	return 0
}

func (m *FMS4) GetDurationRpm() uint64 {
	if m != nil {
		return m.DurationRpm
	}
	return 0
}

func (m *FMS4) GetDurationOfAcceleration() uint64 {
	if m != nil {
		return m.DurationOfAcceleration
	}
	return 0
}

// CANSquarell is a measurement from a Squarell Solid/Flex device (a CAN device).
type CANSquarell struct {
	// FMS1 is a FMS1 message. Optional field.
	Fms1 *FMS1 `protobuf:"bytes,1,opt,name=fms1" json:"fms1,omitempty"`
	// FMS4 is a FMS4 message. Optional field.
	Fms4 *FMS4 `protobuf:"bytes,4,opt,name=fms4" json:"fms4,omitempty"`
}

func (m *CANSquarell) Reset()                    { *m = CANSquarell{} }
func (m *CANSquarell) String() string            { return proto.CompactTextString(m) }
func (*CANSquarell) ProtoMessage()               {}
func (*CANSquarell) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CANSquarell) GetFms1() *FMS1 {
	if m != nil {
		return m.Fms1
	}
	return nil
}

func (m *CANSquarell) GetFms4() *FMS4 {
	if m != nil {
		return m.Fms4
	}
	return nil
}

// FrameInfo holds all the information about the parsing of a raw frame.
type FrameInfo struct {
	// frame_id is the ID of the frame, a non-empty string, source of the report.
	FrameId string `protobuf:"bytes,1,opt,name=frame_id,json=frameId" json:"frame_id,omitempty"`
	// server_timestamp is the report creation timestamp in the server, in seconds from the epoch.
	// This value can diverge significantly from the real timestamp if the frame was buffered in the device prior
	// to its transmission to the server.
	ServerTimestamp int64 `protobuf:"varint,2,opt,name=server_timestamp,json=serverTimestamp" json:"server_timestamp,omitempty"`
	// adapter identifies the adapter that received(or sent) the frame.
	Adapter string `protobuf:"bytes,3,opt,name=adapter" json:"adapter,omitempty"`
	// received indicates if the frame was received (true) from a device, or was sent (false) to a device.
	Received bool `protobuf:"varint,4,opt,name=received" json:"received,omitempty"`
	// data is the raw frame itself.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// data_format is the format of the data field.
	DataFormat FrameInfo_Format `protobuf:"varint,6,opt,name=data_format,json=dataFormat,enum=proto_frameinfo.FrameInfo_Format" json:"data_format,omitempty"`
	// dev_id is the device ID, a non-empty string, with a maximum length of 20, that uniquely identifies a device.
	// Optional field (if there was a parsing error, this field is null, otherwise it should be present).
	DevId string `protobuf:"bytes,7,opt,name=dev_id,json=devId" json:"dev_id,omitempty"`
	// parsing_error holds an error in the parsing of the raw frame. Optional field.
	ParsingError string `protobuf:"bytes,8,opt,name=parsing_error,json=parsingError" json:"parsing_error,omitempty"`
	// reports is the list of reports extracted from the source raw frame. Optional field.
	Reports []*Report `protobuf:"bytes,9,rep,name=reports" json:"reports,omitempty"`
	// tags is a collection of free form strings, used as metadata. For example, a frame infor could be tagged
	// with "smoke-test", indicating that is a testing frame, and should be discarded by the consumers. Optional field.
	Tags []string `protobuf:"bytes,10,rep,name=tags" json:"tags,omitempty"`
}

func (m *FrameInfo) Reset()                    { *m = FrameInfo{} }
func (m *FrameInfo) String() string            { return proto.CompactTextString(m) }
func (*FrameInfo) ProtoMessage()               {}
func (*FrameInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FrameInfo) GetFrameId() string {
	if m != nil {
		return m.FrameId
	}
	return ""
}

func (m *FrameInfo) GetServerTimestamp() int64 {
	if m != nil {
		return m.ServerTimestamp
	}
	return 0
}

func (m *FrameInfo) GetAdapter() string {
	if m != nil {
		return m.Adapter
	}
	return ""
}

func (m *FrameInfo) GetReceived() bool {
	if m != nil {
		return m.Received
	}
	return false
}

func (m *FrameInfo) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *FrameInfo) GetDataFormat() FrameInfo_Format {
	if m != nil {
		return m.DataFormat
	}
	return FrameInfo_Raw
}

func (m *FrameInfo) GetDevId() string {
	if m != nil {
		return m.DevId
	}
	return ""
}

func (m *FrameInfo) GetParsingError() string {
	if m != nil {
		return m.ParsingError
	}
	return ""
}

func (m *FrameInfo) GetReports() []*Report {
	if m != nil {
		return m.Reports
	}
	return nil
}

func (m *FrameInfo) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*Int32Value)(nil), "proto_frameinfo.Int32Value")
	proto.RegisterType((*DoubleValue)(nil), "proto_frameinfo.DoubleValue")
	proto.RegisterType((*Report)(nil), "proto_frameinfo.Report")
	proto.RegisterType((*FMS1)(nil), "proto_frameinfo.FMS1")
	proto.RegisterType((*FMS4)(nil), "proto_frameinfo.FMS4")
	proto.RegisterType((*CANSquarell)(nil), "proto_frameinfo.CANSquarell")
	proto.RegisterType((*FrameInfo)(nil), "proto_frameinfo.FrameInfo")
	proto.RegisterEnum("proto_frameinfo.Report_ReportType", Report_ReportType_name, Report_ReportType_value)
	proto.RegisterEnum("proto_frameinfo.FMS1_PTOType", FMS1_PTOType_name, FMS1_PTOType_value)
	proto.RegisterEnum("proto_frameinfo.FrameInfo_Format", FrameInfo_Format_name, FrameInfo_Format_value)
}

func init() { proto.RegisterFile("frameinfo/proto_frameinfo/proto_frameinfo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x57, 0xdb, 0x6e, 0xe3, 0xc8,
	0x11, 0x8d, 0x64, 0xd9, 0x92, 0x8a, 0xba, 0xd0, 0x6d, 0x7b, 0x96, 0x3b, 0x3b, 0x8b, 0xec, 0x6a,
	0x91, 0xdb, 0x43, 0x3c, 0x63, 0xd9, 0x08, 0x02, 0x24, 0xc1, 0xc2, 0xb6, 0x6c, 0x78, 0x82, 0x78,
	0x2c, 0xd0, 0xde, 0x9d, 0x47, 0xa2, 0x2d, 0xb6, 0x6c, 0xc2, 0x14, 0x9b, 0xc3, 0x8b, 0x6c, 0xff,
	0x45, 0x90, 0xe7, 0x7c, 0x4b, 0xbe, 0x27, 0x5f, 0x11, 0xa4, 0xaa, 0x9a, 0x94, 0x28, 0x5f, 0x80,
	0x7d, 0x12, 0xeb, 0xd4, 0xa9, 0x22, 0xbb, 0xbb, 0xea, 0x74, 0x09, 0xde, 0x4f, 0x13, 0x39, 0x53,
	0x41, 0x34, 0xd5, 0xef, 0xe3, 0x44, 0x67, 0xda, 0x7b, 0xd5, 0xde, 0x65, 0x5b, 0xf4, 0x9f, 0xc0,
	0x83, 0x01, 0xc0, 0xc7, 0x28, 0xdb, 0x1f, 0xfe, 0x2c, 0xc3, 0x5c, 0x89, 0x6d, 0x58, 0x9f, 0xd3,
	0x83, 0x53, 0xfb, 0xae, 0xf6, 0xfb, 0x75, 0xd7, 0x18, 0x83, 0x1f, 0xc0, 0x1a, 0xe9, 0xfc, 0x3a,
	0x54, 0x2f, 0x90, 0x6a, 0x25, 0xe9, 0xdf, 0x2d, 0xd8, 0x70, 0x55, 0xac, 0x93, 0x4c, 0x7c, 0x03,
	0xed, 0x84, 0x9f, 0xbc, 0xc0, 0x77, 0x3a, 0x48, 0x6a, 0xbb, 0x2d, 0x03, 0x7c, 0xf4, 0xc5, 0xef,
	0xa0, 0x1f, 0x44, 0x69, 0x26, 0xc3, 0x50, 0x66, 0x81, 0x8e, 0x88, 0x22, 0xf8, 0x65, 0xbd, 0x2a,
	0x8c, 0xc4, 0xaf, 0xa1, 0x25, 0xd3, 0x54, 0x71, 0x92, 0x2e, 0x33, 0x9a, 0x6c, 0xa3, 0x6b, 0x07,
	0x36, 0x7c, 0x35, 0x27, 0x47, 0x8f, 0xb3, 0xaf, 0xa3, 0x85, 0xf0, 0x1f, 0xc0, 0x4e, 0x55, 0x32,
	0x57, 0x89, 0x97, 0x05, 0x33, 0x85, 0xc9, 0x66, 0xb1, 0xd3, 0x47, 0xc2, 0x9a, 0xdb, 0x37, 0xf8,
	0x55, 0x09, 0x53, 0x72, 0xde, 0x03, 0xca, 0x61, 0x73, 0x8e, 0x26, 0xdb, 0x98, 0xe5, 0x4f, 0xd0,
	0xc8, 0x1e, 0x63, 0xb3, 0xba, 0xde, 0x70, 0xb0, 0xfb, 0x74, 0x23, 0xcd, 0x22, 0x8b, 0x9f, 0x2b,
	0x64, 0xba, 0xcc, 0x17, 0xef, 0xa0, 0xbd, 0x7c, 0x6d, 0x9d, 0x5f, 0xbb, 0x04, 0xc4, 0x5b, 0x68,
	0xd1, 0xca, 0xb2, 0xdc, 0x57, 0xce, 0x1a, 0xef, 0xdb, 0xc2, 0xa6, 0xc8, 0x50, 0x47, 0x37, 0xc6,
	0xd9, 0x60, 0xe7, 0x12, 0xa0, 0xed, 0x4e, 0x63, 0xa5, 0x7c, 0x67, 0xdd, 0x6c, 0x37, 0x1b, 0xc2,
	0x81, 0xe6, 0xad, 0x92, 0x7e, 0x10, 0xdd, 0x38, 0x1b, 0x8c, 0x97, 0x26, 0xed, 0xfe, 0x4d, 0x9c,
	0x7a, 0xd3, 0xe0, 0x01, 0x63, 0x9a, 0xe8, 0x6b, 0xb9, 0x2d, 0x04, 0x4e, 0xc9, 0x16, 0x7f, 0x01,
	0x48, 0x65, 0xa6, 0xc2, 0x30, 0xc8, 0x54, 0xea, 0xb4, 0xd0, 0x6b, 0x0d, 0xbf, 0x79, 0xb6, 0xc4,
	0x65, 0x45, 0xb8, 0x15, 0x3a, 0x05, 0xc7, 0xfa, 0x1e, 0xb7, 0x77, 0xae, 0xc3, 0xcc, 0x69, 0x73,
	0xf0, 0xbb, 0x67, 0xc1, 0x95, 0x52, 0x71, 0xdb, 0xcc, 0xff, 0x19, 0xe9, 0xe2, 0x6f, 0x60, 0x5d,
	0xcb, 0xc9, 0x5d, 0x1e, 0x9b, 0x68, 0xf8, 0x05, 0xd1, 0x60, 0x02, 0x38, 0xfc, 0x47, 0xe8, 0x4c,
	0x64, 0xe4, 0xa5, 0x5f, 0x72, 0x99, 0xe0, 0xf7, 0x38, 0xd6, 0x2b, 0xf1, 0xc7, 0x87, 0x9f, 0x2e,
	0x0b, 0x8e, 0x6b, 0x61, 0x44, 0x69, 0x08, 0x81, 0xc7, 0x2a, 0x6f, 0x52, 0x67, 0xf3, 0xbb, 0x35,
	0x3c, 0x6d, 0x7e, 0x1e, 0xfc, 0xb7, 0x0e, 0xb0, 0x3c, 0x47, 0x61, 0x41, 0xf3, 0xa7, 0xe8, 0x2e,
	0xd2, 0xf7, 0x91, 0xfd, 0x2b, 0xd1, 0x07, 0x6b, 0x2c, 0xa3, 0x60, 0x72, 0x94, 0x67, 0x99, 0x8e,
	0xec, 0x9a, 0xe8, 0x61, 0xa7, 0xdc, 0x44, 0x01, 0x55, 0xe7, 0x45, 0x64, 0xd7, 0x89, 0xb0, 0xb0,
	0xa7, 0x53, 0x7b, 0x4d, 0x74, 0xa0, 0x75, 0xae, 0x7d, 0x35, 0x23, 0xab, 0x41, 0x6e, 0x2a, 0xb7,
	0x93, 0x87, 0x38, 0x48, 0x94, 0x6f, 0xaf, 0x93, 0xfb, 0xb3, 0x7c, 0x1c, 0xeb, 0x20, 0xca, 0xec,
	0x0d, 0xb1, 0x09, 0xdd, 0x23, 0x5e, 0xdd, 0x91, 0xcc, 0x32, 0x95, 0x3c, 0xda, 0x4d, 0x8a, 0x38,
	0x97, 0x41, 0x54, 0x02, 0x2d, 0xd1, 0x85, 0xf6, 0x05, 0x56, 0xed, 0x25, 0x1d, 0xb8, 0xdd, 0x26,
	0xff, 0x27, 0x9d, 0xcc, 0x64, 0x68, 0x00, 0xc0, 0x36, 0xd8, 0x3c, 0x93, 0x49, 0x7a, 0x7b, 0x38,
	0x99, 0xa8, 0x50, 0x25, 0xdc, 0x38, 0xb6, 0x25, 0x6c, 0xe8, 0x30, 0x7c, 0x94, 0xc8, 0x3b, 0x2c,
	0x08, 0xbb, 0x43, 0x0b, 0xbb, 0xbc, 0xd5, 0x93, 0x3b, 0x8c, 0xea, 0x52, 0xd6, 0x63, 0x8d, 0x27,
	0x9a, 0x12, 0xbb, 0x47, 0xe6, 0xe5, 0xad, 0x4c, 0xe2, 0xab, 0x3c, 0x89, 0xec, 0xbe, 0xd8, 0x82,
	0xfe, 0xdf, 0xe5, 0x6c, 0x86, 0x71, 0x23, 0x95, 0xa9, 0x49, 0x86, 0x21, 0x36, 0x65, 0x3c, 0x79,
	0xc0, 0x8f, 0x8a, 0x64, 0x38, 0x92, 0x99, 0xb4, 0x37, 0x45, 0x13, 0xd6, 0xae, 0xf4, 0xbd, 0x2d,
	0x44, 0x0b, 0x1a, 0x1c, 0xb9, 0x25, 0x00, 0x36, 0xce, 0x35, 0x7f, 0xc2, 0x36, 0x05, 0x14, 0xcb,
	0x38, 0xc4, 0x0f, 0xcb, 0xec, 0x9d, 0xc1, 0x7f, 0x90, 0x78, 0x7a, 0x7e, 0xb9, 0x47, 0x8d, 0xa0,
	0x7d, 0x3d, 0xc3, 0xe4, 0x49, 0x21, 0x20, 0x0b, 0x5b, 0x7c, 0x0b, 0x90, 0x69, 0xd4, 0x00, 0x6f,
	0x9a, 0xab, 0x90, 0x7b, 0x08, 0x3b, 0x81, 0x91, 0x53, 0x04, 0xc4, 0xf7, 0xd0, 0x51, 0xd8, 0x15,
	0x91, 0xf2, 0x6e, 0x75, 0x9e, 0xa4, 0x45, 0x1f, 0x59, 0x06, 0x3b, 0x23, 0x88, 0x28, 0x72, 0x92,
	0xe5, 0x98, 0xc2, 0xf4, 0x8c, 0xe9, 0x26, 0xcb, 0x60, 0xbc, 0x6f, 0x62, 0x17, 0xb6, 0x0a, 0x4a,
	0x91, 0xac, 0xda, 0x5d, 0x9b, 0xc6, 0x75, 0xc2, 0x1e, 0xc3, 0xff, 0x00, 0xdb, 0xab, 0xfc, 0x4c,
	0x27, 0x5f, 0x50, 0xfd, 0x4c, 0xdb, 0x89, 0x6a, 0xc0, 0x15, 0x7b, 0x48, 0xe2, 0xee, 0x82, 0xc9,
	0x9d, 0x8f, 0x85, 0xe4, 0xa5, 0xf7, 0x41, 0x36, 0xb9, 0x2d, 0xfa, 0xb0, 0x57, 0xc2, 0x97, 0x8c,
	0x8a, 0xbf, 0xc2, 0x5b, 0x59, 0x9e, 0x9d, 0x4e, 0xbc, 0x58, 0xf9, 0xf8, 0x96, 0x58, 0xa7, 0x5c,
	0x54, 0xdc, 0x9d, 0x35, 0xd7, 0xa9, 0x30, 0xc6, 0x44, 0x18, 0x17, 0x7e, 0x5a, 0xeb, 0x35, 0x1e,
	0xb1, 0x2a, 0xdf, 0xd1, 0xe6, 0x77, 0x58, 0x8c, 0x15, 0x2f, 0xf8, 0x01, 0xba, 0x93, 0x30, 0xc7,
	0xa7, 0x92, 0x03, 0xcc, 0xe9, 0x18, 0xb0, 0x42, 0x4a, 0xf2, 0x20, 0x55, 0x1e, 0xae, 0x25, 0x98,
	0x2b, 0xee, 0x2d, 0x22, 0x31, 0x78, 0xc8, 0x18, 0x7e, 0x2a, 0xc4, 0xd8, 0x68, 0x05, 0xa3, 0xc3,
	0xda, 0xf8, 0xed, 0xb3, 0xee, 0xa3, 0x13, 0xde, 0x1d, 0x5f, 0x5d, 0xb0, 0x2c, 0xb6, 0x31, 0xa0,
	0x88, 0xc6, 0x83, 0xa5, 0x23, 0xf5, 0x42, 0x35, 0xc7, 0x83, 0xed, 0x9a, 0x83, 0x25, 0xe4, 0x1f,
	0x04, 0x88, 0x3f, 0x82, 0x28, 0xf7, 0x56, 0xcd, 0x62, 0x5a, 0x6b, 0x9e, 0x28, 0xd6, 0x76, 0x3c,
	0x11, 0xe3, 0xb9, 0x5a, 0x3a, 0xc4, 0x6f, 0xa0, 0x87, 0xbf, 0xd7, 0xda, 0x8b, 0x13, 0x95, 0xa6,
	0x44, 0xed, 0x33, 0xb5, 0xcb, 0xe8, 0xb8, 0x00, 0xc5, 0x00, 0xba, 0xf2, 0x21, 0x54, 0xde, 0xbd,
	0x0a, 0x6e, 0x6e, 0x33, 0xef, 0x03, 0x0b, 0x3d, 0x15, 0x03, 0x82, 0x9f, 0x19, 0xfb, 0xf0, 0x94,
	0xb3, 0x87, 0xf2, 0xf0, 0x84, 0xb3, 0xf7, 0x94, 0x33, 0xe4, 0xfb, 0x6a, 0x85, 0x33, 0x7c, 0xca,
	0xd9, 0x77, 0xb6, 0x9e, 0x72, 0xf6, 0xcb, 0xeb, 0x29, 0x98, 0x28, 0xcf, 0x0f, 0xf0, 0x56, 0x88,
	0x26, 0xca, 0xd9, 0x66, 0x5a, 0xbf, 0xc0, 0x47, 0x05, 0x3c, 0xf8, 0x67, 0x1d, 0x9a, 0xc5, 0x36,
	0x92, 0x6e, 0x20, 0x2e, 0x51, 0x15, 0x7d, 0x94, 0x25, 0x6c, 0xa3, 0x33, 0x1d, 0xfa, 0x46, 0x8f,
	0x5c, 0x35, 0xd3, 0x99, 0x62, 0xbb, 0xce, 0x4d, 0x8e, 0xd1, 0xfe, 0xf5, 0x23, 0x6a, 0x11, 0xca,
	0x8b, 0x71, 0x96, 0x50, 0x83, 0x5a, 0xf6, 0x52, 0x65, 0x28, 0x44, 0xd8, 0xe2, 0x23, 0x55, 0xd4,
	0x94, 0x3a, 0xd6, 0x32, 0x25, 0x3d, 0x02, 0xba, 0xbd, 0xd3, 0x7c, 0xa6, 0x50, 0x88, 0x30, 0xf3,
	0x42, 0x52, 0x14, 0xea, 0xd0, 0x57, 0xb0, 0x75, 0xb8, 0x2c, 0x42, 0x92, 0xa4, 0x24, 0xf0, 0x15,
	0x2a, 0x92, 0x03, 0xdb, 0xb8, 0xdb, 0x58, 0x04, 0x37, 0x54, 0x01, 0x3e, 0xa6, 0x2f, 0xa5, 0xe9,
	0x0d, 0x08, 0xfc, 0xfe, 0x12, 0x38, 0xc7, 0x4f, 0x49, 0x1e, 0xf7, 0x50, 0x9b, 0x5e, 0xc2, 0x87,
	0xa8, 0x50, 0xf8, 0xca, 0x4f, 0x3a, 0x1b, 0xa9, 0x29, 0x1e, 0x35, 0x89, 0x14, 0x0a, 0x08, 0xda,
	0x87, 0x73, 0x19, 0x84, 0xb4, 0x72, 0xbb, 0x37, 0xf8, 0xd7, 0x3a, 0x0b, 0xc8, 0x01, 0x6d, 0xa3,
	0x9f, 0x1b, 0xb1, 0xf3, 0xfc, 0x24, 0x98, 0xd3, 0x15, 0x48, 0x42, 0xd2, 0x70, 0xfb, 0x25, 0x3e,
	0x32, 0xb0, 0x38, 0x80, 0x37, 0x0b, 0xea, 0x6a, 0x89, 0xd7, 0x39, 0x60, 0xbb, 0xf4, 0x1e, 0x57,
	0x4b, 0xfd, 0xd7, 0x60, 0x05, 0x7e, 0x88, 0xf1, 0x3c, 0x46, 0xb0, 0xca, 0x34, 0x5c, 0x30, 0x10,
	0x49, 0xba, 0xd8, 0x83, 0x1d, 0xae, 0xe6, 0x3c, 0x55, 0xbe, 0x87, 0x29, 0x88, 0x8a, 0xee, 0xf2,
	0xee, 0x16, 0xe4, 0xfc, 0x09, 0x7d, 0x23, 0x76, 0x7d, 0x44, 0x8f, 0xf8, 0x2d, 0x2c, 0x3e, 0xce,
	0xd3, 0x53, 0x0f, 0x3b, 0x83, 0x05, 0xa7, 0xe1, 0x76, 0x4b, 0xf8, 0x62, 0x3a, 0xc6, 0xf9, 0xec,
	0x3d, 0x6c, 0x3f, 0x4b, 0x4d, 0x64, 0x23, 0x36, 0x9b, 0xab, 0x99, 0x29, 0xe0, 0x47, 0x78, 0x17,
	0xe5, 0xb3, 0x6b, 0xbc, 0x94, 0x31, 0xad, 0x91, 0x03, 0x19, 0xc7, 0x61, 0x30, 0xe1, 0xa4, 0x29,
	0x0b, 0x4f, 0xc3, 0xfd, 0xda, 0x70, 0x2e, 0xa6, 0x74, 0x27, 0xa8, 0xc3, 0x0a, 0x01, 0xb7, 0x73,
	0x13, 0x9d, 0x2b, 0xd1, 0x66, 0x30, 0x68, 0xb8, 0x3d, 0x74, 0x2c, 0x43, 0x52, 0x5a, 0x77, 0x41,
	0x2d, 0x44, 0x85, 0xfb, 0x0f, 0xe7, 0x88, 0x36, 0xd3, 0x05, 0xd3, 0x8f, 0xd9, 0x35, 0x36, 0x1e,
	0xd2, 0x16, 0xda, 0x19, 0xaf, 0x5c, 0x25, 0x0b, 0x50, 0xc3, 0xed, 0x10, 0x38, 0x2a, 0xb0, 0x95,
	0x63, 0x5a, 0xd5, 0x58, 0x6b, 0xf5, 0x98, 0x56, 0x54, 0x16, 0x55, 0x60, 0x11, 0x65, 0x24, 0xbc,
	0x63, 0x54, 0xa0, 0x44, 0x8d, 0x7c, 0xa3, 0x4a, 0x2e, 0x68, 0x49, 0x3c, 0x63, 0xf1, 0x69, 0xb8,
	0x56, 0x89, 0xb9, 0xf1, 0x4c, 0xfc, 0x19, 0x9c, 0xea, 0xe1, 0xc8, 0xca, 0x75, 0xca, 0x22, 0xd4,
	0x70, 0xdf, 0x2c, 0x4f, 0xa9, 0x7a, 0xd9, 0x0e, 0x26, 0x60, 0x55, 0x06, 0x0e, 0xdc, 0xcb, 0xc6,
	0x74, 0x96, 0xee, 0x71, 0x39, 0x5a, 0xc3, 0x9d, 0x17, 0xe5, 0xd1, 0x65, 0x4a, 0x41, 0x3d, 0xe0,
	0x92, 0x79, 0x85, 0x7a, 0xc0, 0xd4, 0x83, 0xc1, 0xff, 0xea, 0xd0, 0x3e, 0xe5, 0xe1, 0x14, 0x1d,
	0x2b, 0x93, 0x6b, 0x6d, 0x75, 0x72, 0x7d, 0x69, 0xfe, 0xad, 0xbf, 0x3c, 0xff, 0xe2, 0xf8, 0x28,
	0x7d, 0x19, 0xd3, 0x25, 0xbc, 0x66, 0x92, 0x14, 0x26, 0xdd, 0xcf, 0x09, 0xaa, 0x03, 0x36, 0x82,
	0xb9, 0x3d, 0x5b, 0xee, 0xc2, 0xa6, 0x19, 0xca, 0xc7, 0xfb, 0x9f, 0x4b, 0xb7, 0xe3, 0xf2, 0xb3,
	0x38, 0x02, 0x8b, 0x7e, 0xbd, 0x29, 0x8d, 0x26, 0x19, 0x17, 0x6a, 0x6f, 0xf8, 0xfd, 0xf3, 0xf5,
	0x94, 0x0b, 0xd8, 0x3d, 0x65, 0xa2, 0x0b, 0x14, 0x65, 0x9e, 0x2b, 0xf3, 0x7c, 0xb3, 0x3a, 0xcf,
	0x63, 0xf1, 0xc4, 0x38, 0xc8, 0x50, 0x0f, 0xa0, 0xe4, 0xe8, 0x84, 0xcb, 0xb2, 0xed, 0x76, 0x0a,
	0xf0, 0x84, 0x30, 0x2c, 0xca, 0xa6, 0xf9, 0x6f, 0x41, 0x65, 0xb8, 0x86, 0x7b, 0xf9, 0xd5, 0x2b,
	0x13, 0xbb, 0x5b, 0xf2, 0x16, 0xa3, 0x20, 0x54, 0x46, 0xc1, 0xb7, 0xb0, 0x51, 0x7c, 0x0c, 0xea,
	0xa4, 0x2b, 0xef, 0x51, 0x6a, 0xf1, 0xe1, 0x4c, 0x3d, 0xd8, 0xb5, 0xa3, 0xfa, 0x59, 0xed, 0x7a,
	0x83, 0x93, 0xee, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x55, 0x90, 0xdb, 0x72, 0x0d, 0x00,
	0x00,
}
